using System;
using System.Collections.Generic;

public class Account
{
    private string name;
    private double balance;

    public Account(string name = "Unnamed Account", double balance = 0.0)
    {
        this.name = name;
        this.balance = balance;
    }

    public virtual bool Deposit(double amount)
    {
        if (amount < 0)
            return false;
        balance += amount;
        return true;
    }

    public virtual bool Withdraw(double amount)
    {
        if (balance - amount >= 0)
        {
            balance -= amount;
            return true;
        }
        return false;
    }

    public double GetBalance()
    {
        return balance;
    }

    public override string ToString()
    {
        return $"[Account: {name}: {balance}]";
    }
}

public class SavingsAccount : Account
{
    private double interestRate;

    public SavingsAccount(string name = "Unnamed Savings Account", double balance = 0.0, double interestRate = 0.0)
        : base(name, balance)
    {
        this.interestRate = interestRate;
    }

    public override bool Deposit(double amount)
    {
        if (base.Deposit(amount))
        {
            double interest = amount * interestRate / 100;
            return base.Deposit(interest);
        }
        return false;
    }

    public override string ToString()
    {
        return $"[SavingsAccount: Balance={GetBalance()}, InterestRate={interestRate}%]";
    }
}

public class CheckingAccount : Account
{
    private const double WithdrawFee = 1.50;

    public CheckingAccount(string name = "Unnamed Checking Account", double balance = 0.0)
        : base(name, balance)
    {
    }

    public override bool Withdraw(double amount)
    {
        return base.Withdraw(amount + WithdrawFee);
    }

    public override string ToString()
    {
        return $"[CheckingAccount: Balance={GetBalance()}]";
    }
}

public class TrustAccount : SavingsAccount
{
    private int withdrawalCount = 0;
    private const int MaxWithdrawals = 3;
    private const double MaxWithdrawPercent = 0.20;

    public TrustAccount(string name = "Unnamed Trust Account", double balance = 0.0, double interestRate = 0.0)
        : base(name, balance, interestRate)
    {
    }

    public override bool Deposit(double amount)
    {
        if (amount >= 5000)
            amount += 50; 
        return base.Deposit(amount);
    }

    public override bool Withdraw(double amount)
    {
        if (withdrawalCount >= MaxWithdrawals)
            return false;

        double maxAllowed = GetBalance() * MaxWithdrawPercent;
        if (amount > maxAllowed)
            return false;

        withdrawalCount++;
        return base.Withdraw(amount);
    }

    public override string ToString()
    {
        return $"[TrustAccount: Balance={GetBalance()}, Withdrawals={withdrawalCount}]";
    }
}

public static class AccountUtil
{
    public static void Display<T>(List<T> accounts) where T : Account
    {
        for (int i = 0; i < accounts.Count; i++)
            Console.WriteLine(accounts[i].ToString());
    }

    public static void Deposit<T>(List<T> accounts, double amount) where T : Account
    {
        for (int i = 0; i < accounts.Count; i++)
            accounts[i].Deposit(amount);
    }

    public static void Withdraw<T>(List<T> accounts, double amount) where T : Account
    {
        for (int i = 0; i < accounts.Count; i++)
            accounts[i].Withdraw(amount);
    }
}

class Program
{
    static void Main()
    {
        
        var accounts = new List<Account>
        {
            new Account(),
            new Account("Larry"),
            new Account("Moe", 2000),
            new Account("Curly", 5000)
        };

        AccountUtil.Display(accounts);
        AccountUtil.Deposit(accounts, 1000);
        AccountUtil.Withdraw(accounts, 2000);

       
        var savAccounts = new List<SavingsAccount>
        {
            new SavingsAccount(),
            new SavingsAccount("Superman"),
            new SavingsAccount("Batman", 2000),
            new SavingsAccount("Wonderwoman", 5000, 5.0)
        };

        AccountUtil.Display(savAccounts);
        AccountUtil.Deposit(savAccounts, 1000);
        AccountUtil.Withdraw(savAccounts, 2000);

        
        var checAccounts = new List<CheckingAccount>
        {
            new CheckingAccount(),
            new CheckingAccount("Larry2"),
            new CheckingAccount("Moe2", 2000),
            new CheckingAccount("Curly2", 5000)
        };

        AccountUtil.Display(checAccounts);
        AccountUtil.Deposit(checAccounts, 1000);
        AccountUtil.Withdraw(checAccounts, 2000);
        AccountUtil.Withdraw(checAccounts, 2000);

        
        var trustAccounts = new List<TrustAccount>
        {
            new TrustAccount(),
            new TrustAccount("Superman2"),
            new TrustAccount("Batman2", 2000),
            new TrustAccount("Wonderwoman2", 5000, 5.0)
        };

        AccountUtil.Display(trustAccounts);
        AccountUtil.Deposit(trustAccounts, 1000);
        AccountUtil.Deposit(trustAccounts, 6000);
        AccountUtil.Withdraw(trustAccounts, 2000);
        AccountUtil.Withdraw(trustAccounts, 3000);
        AccountUtil.Withdraw(trustAccounts, 500);

        Console.WriteLine();
    }
}
